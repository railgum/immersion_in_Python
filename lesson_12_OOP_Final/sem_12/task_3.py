# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.
# üìå –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ –≤
#    –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç start –¥–æ stop —Å —à–∞–≥–æ–º step.
# üìå –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Å—á–∏—Ç–∞–µ–º step=1.
# üìå –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä, —Ç–∞–∫–∂–µ —Å—á–∏—Ç–∞–µ–º start=1.

class FactorStep:
    def __init__(self, *args):
        self.start, self.stop, self.step = 1,1,1
        if args:
            args = list(map(int, args))
            match len(args):
                case 1:
                    self.stop = args[0]
                case 2:
                    self.start, self.stop = args
                case 3:
                    self.start, self.stop, self.step = args
        self._value = self._fact()

    def _fact(self):
        factorial = []
        number = 1
        for i in range(self.start, self.stop, self.step):
            number *= i
            factorial.append(number)
        return factorial

    def __iter__(self):
        return self

    def __next__(self):
        while self._value:
            return self._value.pop(0)
        raise StopIteration

a = FactorStep(3,10,2)
print(*a)